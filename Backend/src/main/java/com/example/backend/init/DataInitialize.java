package com.example.backend.init;

import com.example.backend.entity.*;
import com.example.backend.repository.*;
import lombok.RequiredArgsConstructor;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.CommandLineRunner;
import org.springframework.security.crypto.password.PasswordEncoder;
import org.springframework.stereotype.Component;
import org.springframework.transaction.annotation.Transactional;

import java.text.SimpleDateFormat;
import java.time.LocalDate;
import java.util.*;

@Component
@RequiredArgsConstructor
public class DataInitialize implements EntityInitialize, CommandLineRunner {
    private final RoleRepository roleRepository;
    private final UserRepository userRepository;
    private final UserProfileRepository userProfileRepository;
    private final CategoryRepository categoryRepository;
    private final FilmRepository filmRepository;
    private final FilmCategoryRepository filmCategoryRepository;
    private final PasswordEncoder passwordEncoder;

    @Override
    @Transactional
    public void initializeRoles() {
        if (roleRepository.count() == 0) {
            List<String> roleNames = Arrays.asList("ADMIN", "STAFF", "CUSTOMER");
            for (String name : roleNames) {
                Role role = new Role();
                role.setName(name);
                roleRepository.save(role);
            }
            System.out.println("‚úÖ ƒê√£ kh·ªüi t·∫°o b·∫£ng ROLE th√†nh c√¥ng!");
        } else {
            System.out.println("‚ÑπÔ∏è B·∫£ng ROLE ƒë√£ c√≥ d·ªØ li·ªáu, b·ªè qua.");
        }
    }

    @Override
    @Transactional
    public void initializeUsersAndUserRoles() {
        if (userRepository.count() == 0) {
            String password = "$2a$10$bbvAcEp3Bcov0irbT24Xnuef9YHpSZBYnuXktTQ7S.nnYOvS7ABli";

            Role adminRole = roleRepository.findByName("ADMIN").orElseThrow();
            Role staffRole = roleRepository.findByName("STAFF").orElseThrow();
            Role customerRole = roleRepository.findByName("CUSTOMER").orElseThrow();

            List<String> baseNames = Arrays.asList("Ly", "Thang", "Thien", "Quan", "Kiet", "My");
            List<Users> allUsers = new ArrayList<>();

            for (String base : baseNames) {
                Users admin = new Users(base + "Admin", password, base.toLowerCase() + "admin@gmail.com", true);
                admin.getUserRoles().add(new UserRole(admin.getUsername(), adminRole.getId(), admin, adminRole));

                Users staff = new Users(base + "Staff", password, base.toLowerCase() + "staff@gmail.com", true);
                staff.getUserRoles().add(new UserRole(staff.getUsername(), staffRole.getId(), staff, staffRole));

                Users customer = new Users(base + "Customer", password, base.toLowerCase() + "customer@gmail.com", true);
                customer.getUserRoles().add(new UserRole(customer.getUsername(), customerRole.getId(), customer, customerRole));

                allUsers.addAll(Arrays.asList(admin, staff, customer));
            }

            userRepository.saveAll(allUsers);
            System.out.println("‚úÖ ƒê√£ kh·ªüi t·∫°o b·∫£ng USERS v√† USER_ROLES th√†nh c√¥ng!");
        } else {
            System.out.println("‚ÑπÔ∏è B·∫£ng USERS ƒë√£ c√≥ d·ªØ li·ªáu, b·ªè qua.");
        }
    }

    @Override
    @Transactional
    public void initializeUserProfiles() {
        if (userProfileRepository.count() == 0) {

            SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd");
            List<Users> users = userRepository.findAll();

            for (Users user : users) {
                try {
                    if (user.getProfile() != null) continue;

                    UserProfile profile = new UserProfile();
                    profile.setUser(user);
                    user.setProfile(profile);
                    profile.setAvatarUrl("avatar.jpg");

                    String username = user.getUsername();
                    if (username.startsWith("Ly")) {
                        profile.setFullName("Nguy·ªÖn Th√†nh L√Ω");
                        profile.setGender(true);
                        profile.setPhone("090100000" + getLastDigit(username));
                        profile.setAddress("B√¨nh Th·∫°nh, TP.HCM");
                        profile.setBirthday(sdf.parse("2000-03-16"));
                    } else if (username.startsWith("Thang")) {
                        profile.setFullName("Tr∆∞∆°ng C·∫©m Th·∫Øng");
                        profile.setGender(true);
                        profile.setPhone("090200000" + getLastDigit(username));
                        profile.setAddress("Qu·∫≠n 3, TP.HCM");
                        profile.setBirthday(sdf.parse("1997-08-21"));
                    } else if (username.startsWith("Thien")) {
                        profile.setFullName("Tr·∫ßn L√™ Duy Thi·ªán");
                        profile.setGender(true);
                        profile.setPhone("090300000" + getLastDigit(username));
                        profile.setAddress("T√¢n B√¨nh, TP.HCM");
                        profile.setBirthday(sdf.parse("2002-08-25"));
                    } else if (username.startsWith("Quan")) {
                        profile.setFullName("Nguy·ªÖn Kh·∫Øc Qu√¢n");
                        profile.setGender(true);
                        profile.setPhone("090400000" + getLastDigit(username));
                        profile.setAddress("Th·ªß ƒê·ª©c, TP.HCM");
                        profile.setBirthday(sdf.parse("1999-05-30"));
                    } else if (username.startsWith("Kiet")) {
                        profile.setFullName("ƒêinh Anh Ki·ªát");
                        profile.setGender(true);
                        profile.setPhone("090500000" + getLastDigit(username));
                        profile.setAddress("G√≤ V·∫•p, TP.HCM");
                        profile.setBirthday(sdf.parse("2002-02-11"));
                    } else if (username.startsWith("My")) {
                        profile.setFullName("L√™ H·∫£i My");
                        profile.setGender(false);
                        profile.setPhone("090600000" + getLastDigit(username));
                        profile.setAddress("Ph√∫ Nhu·∫≠n, TP.HCM");
                        profile.setBirthday(sdf.parse("1997-01-13"));
                    }

                    userRepository.save(user); // cascade l∆∞u profile

                } catch (Exception e) {
                    e.printStackTrace();
                }
            }

            System.out.println("‚úÖ ƒê√£ kh·ªüi t·∫°o b·∫£ng USER_PROFILES th√†nh c√¥ng!");
        } else {
            System.out.println("‚ÑπÔ∏è B·∫£ng USER_PROFILES ƒë√£ c√≥ d·ªØ li·ªáu, b·ªè qua.");
        }
    }

    @Override
    @Transactional
    public void initializeCategories() {
        if (categoryRepository.count() == 0) {
            List<String> categoryNames = Arrays.asList(
                    "H√†nh ƒë·ªông",
                    "Khoa h·ªçc vi·ªÖn t∆∞·ªüng",
                    "Gi·∫£ t∆∞·ªüng",
                    "K·ªãch t√≠nh",
                    "T√¢m l√Ω",
                    "H√†i h∆∞·ªõc",
                    "Kinh d·ªã",
                    "L√£ng m·∫°n",
                    "Phi√™u l∆∞u",
                    "Gia ƒë√¨nh",
                    "Ho·∫°t h√¨nh",
                    "T·ªôi ph·∫°m",
                    "B√≠ ·∫©n",
                    "T√†i li·ªáu"
            );

            for (String name : categoryNames) {
                // Ki·ªÉm tra xem th·ªÉ lo·∫°i ƒë√£ t·ªìn t·∫°i trong DB ch∆∞a
                Category existingCategory = categoryRepository.findByName(name);

                if (existingCategory == null) {
                    // N·∫øu ch∆∞a t·ªìn t·∫°i, t·∫°o Entity m·ªõi v√† l∆∞u v√†o DB
                    Category newCategory = new Category();
                    newCategory.setName(name);
                    newCategory.setDeleted(true); // is_deleted = 0

                    categoryRepository.save(newCategory);
                    // System.out.println("ƒê√£ th√™m th·ªÉ lo·∫°i: " + name); // T√πy ch·ªçn ƒë·ªÉ debug
                }
            }
            System.out.println("‚úÖ ƒê√£ kh·ªüi t·∫°o b·∫£ng CATEGORY th√†nh c√¥ng!");
        } else {
            System.out.println("‚ÑπÔ∏è B·∫£ng CATEGORY ƒë√£ c√≥ d·ªØ li·ªáu, b·ªè qua.");
        }
    }

    @Override
    @Transactional
    public void initializeFilmsAndFilmCategories() {
        if (filmRepository.count() == 0) {
            System.out.println("üöÄ B·∫Øt ƒë·∫ßu kh·ªüi t·∫°o d·ªØ li·ªáu cho b·∫£ng FILMS...");

            List<Film> films = new ArrayList<>();

            // 1Ô∏è‚É£ Kh·ªüi t·∫°o 20 phim
            Film f1 = new Film();
            f1.setName("5 Centimeters Per Second");
            f1.setCountry("Nh·∫≠t B·∫£n");
            f1.setDirector("Makoto Shinkai");
            f1.setActor("Kenji Mizuhashi, Yoshimi Kondo");
            f1.setDescription("M·ªôt c√¢u chuy·ªán t√¨nh y√™u l√£ng m·∫°n bu·ªìn b√£ ƒë∆∞·ª£c k·ªÉ qua ba ch∆∞∆°ng, theo ch√¢n Takaki Tono t·ª´ th·ªùi ·∫•u th∆° ƒë·∫øn khi tr∆∞·ªüng th√†nh.");
            f1.setDuration(63);
            f1.setPoster("5cms_poster.webp");
            f1.setTrailer("5cms_trailer.mp4");
            f1.setReleaseDate(LocalDate.of(2007, 3, 3));
            f1.setStatus("active");
            f1.setDeleted(true);
            films.add(f1);

            Film f2 = new Film();
            f2.setName("Alice in Borderland 3");
            f2.setCountry("Nh·∫≠t B·∫£n");
            f2.setDirector("Shinsuke Sato");
            f2.setActor("Kento Yamazaki, Tao Tsuchiya");
            f2.setDescription("Sau khi tr·ªü v·ªÅ t·ª´ v√πng bi√™n gi·ªõi, nh·ªØng ng∆∞·ªùi s·ªëng s√≥t ph·∫£i ƒë·ªëi m·∫∑t v·ªõi th·ª±c t·∫ø m·ªõi ƒë·∫ßy b√≠ ·∫©n v√† t√†n kh·ªëc h∆°n.");
            f2.setDuration(120);
            f2.setPoster("Alice_in_border_land_3_poster.webp");
            f2.setTrailer("Alice_in_borderland_3_trailer.mp4");
            f2.setReleaseDate(LocalDate.of(2025, 10, 1));
            f2.setStatus("upcoming");
            f2.setDeleted(true);
            films.add(f2);

            Film f3 = new Film();
            f3.setName("Avatar 3");
            f3.setCountry("M·ªπ");
            f3.setDirector("James Cameron");
            f3.setActor("Sam Worthington, Zoe Salda√±a");
            f3.setDescription("Ph·∫ßn ti·∫øp theo c·ªßa si√™u ph·∫©m khoa h·ªçc vi·ªÖn t∆∞·ªüng n√†y ƒë∆∞a kh√°n gi·∫£ ƒëi s√¢u h∆°n v√†o th·∫ø gi·ªõi Pandora huy·ªÅn ·∫£o.");
            f3.setDuration(192);
            f3.setPoster("Avatar_3_poster.jpg");
            f3.setTrailer("Avatar_3_trailer.mp4");
            f3.setReleaseDate(LocalDate.of(2025, 12, 19));
            f3.setStatus("upcoming");
            f3.setDeleted(true);
            films.add(f3);

            Film f4 = new Film();
            f4.setName("B·ªë Gi√† 5 Si√™u ƒê·∫≥ng C·∫•p");
            f4.setCountry("H√†n Qu·ªëc");
            f4.setDirector("Kang Hyoung Chul");
            f4.setActor("Yoo Ah In, Ra Mi Ran, Ahn Jae Hong, Park Jin Young, Kim Hee Won");
            f4.setDescription("C√¢u chuy·ªán v·ªÅ m·ªôt gia ƒë√¨nh mafia c·ªë g·∫Øng duy tr√¨ quy·ªÅn l·ª±c trong th·∫ø gi·ªõi ng·∫ßm ƒë·∫ßy bi·∫øn ƒë·ªông.");
            f4.setDuration(135);
            f4.setPoster("Bo_5_sieu_dang_cap_poster.jpg");
            f4.setTrailer("Bo_5_sieu_dang_cap_trailer.mp4");
            f4.setReleaseDate(LocalDate.of(2025, 5, 15));
            f4.setStatus("upcoming");
            f4.setDeleted(true);
            films.add(f4);

            Film f5 = new Film();
            f5.setName("B√∫p B√™ S√°t Nh√¢n");
            f5.setCountry("M·ªπ");
            f5.setDirector("Gerard Johnstone");
            f5.setActor("Allison Williams, Violet McGraw");
            f5.setDescription("M3GAN l√† m·ªôt robot AI gi·ªëng b√∫p b√™, ƒë∆∞·ª£c l·∫≠p tr√¨nh ƒë·ªÉ tr·ªü th√†nh ng∆∞·ªùi b·∫°n ho√†n h·∫£o cho tr·∫ª em.");
            f5.setDuration(102);
            f5.setPoster("Bup_be_sat_nhan_poster.jpg");
            f5.setTrailer("Bup_be_sat_nhan_trailer.mp4");
            f5.setReleaseDate(LocalDate.of(2023, 1, 6));
            f5.setStatus("active");
            f5.setDeleted(true);
            films.add(f5);

            Film f6 = new Film();
            f6.setName("Conan Movie 20: The Darkest Nightmare");
            f6.setCountry("Nh·∫≠t B·∫£n");
            f6.setDirector("Kobun Shizuno");
            f6.setActor("Minami Takayama, Kappei Yamaguchi");
            f6.setDescription("T·ªï ch·ª©c √Åo ƒëen b√≠ ·∫©n quay l·∫°i v√† g√¢y ra h√†ng lo·∫°t v·ª• √°n ph·ª©c t·∫°p.");
            f6.setDuration(112);
            f6.setPoster("Conan_movie_20_poster.jpg");
            f6.setTrailer("Conan_movie_20_trailer.mp4");
            f6.setReleaseDate(LocalDate.of(2016, 4, 16));
            f6.setStatus("active");
            f6.setDeleted(true);
            films.add(f6);

            Film f7 = new Film();
            f7.setName("Deadpool 3");
            f7.setCountry("M·ªπ");
            f7.setDirector("Shawn Levy");
            f7.setActor("Ryan Reynolds, Hugh Jackman");
            f7.setDescription("Deadpool b·ªã k√©o v√†o m·ªôt nhi·ªám v·ª• ƒëa v≈© tr·ª• c√πng v·ªõi Wolverine.");
            f7.setDuration(127);
            f7.setPoster("Deadpool_3_Poster.jpg");
            f7.setTrailer("Deadpool_3_trailer.mp4");
            f7.setReleaseDate(LocalDate.of(2024, 7, 26));
            f7.setStatus("active");
            f7.setDeleted(true);
            films.add(f7);

            Film f8 = new Film();
            f8.setName("Death Race 3: Inferno");
            f8.setCountry("M·ªπ");
            f8.setDirector("Roel Rein√©");
            f8.setActor("Luke Goss, Danny Trejo");
            f8.setDescription("Carl Lucas/Frankenstein ƒë·ªëi m·∫∑t v·ªõi th·ª≠ th√°ch cu·ªëi c√πng t·∫°i sa m·∫°c Kalahari kh·∫Øc nghi·ªát.");
            f8.setDuration(105);
            f8.setPoster("Death_race_3_poster.jpg");
            f8.setTrailer("Death_race_3_trailer.mp4");
            f8.setReleaseDate(LocalDate.of(2013, 1, 22));
            f8.setStatus("inactive");
            f8.setDeleted(true);
            films.add(f8);

            Film f9 = new Film();
            f9.setName("Doraemon Movie 44: Nobita's Earth Symphony");
            f9.setCountry("Nh·∫≠t B·∫£n");
            f9.setDirector("Kazuaki Imai");
            f9.setActor("Wasabi Mizuta, Megumi Ohara");
            f9.setDescription("Doraemon v√† Nobita tham gia v√†o m·ªôt cu·ªôc phi√™u l∆∞u xuy√™n kh√¥ng gian v√† th·ªùi gian.");
            f9.setDuration(108);
            f9.setPoster("Doraemon_movie_44_poster.jpg");
            f9.setTrailer("Doraemon_movie_44_trailer.mp4");
            f9.setReleaseDate(LocalDate.of(2025, 3, 1));
            f9.setStatus("upcoming");
            f9.setDeleted(true);
            films.add(f9);

            Film f10 = new Film();
            f10.setName("Fast and Furious 7");
            f10.setCountry("M·ªπ");
            f10.setDirector("James Wan");
            f10.setActor("Vin Diesel, Paul Walker, Jason Statham");
            f10.setDescription("Nh√≥m c·ªßa Dom b·ªã Deckard Shaw truy s√°t ƒë·ªÉ tr·∫£ th√π.");
            f10.setDuration(137);
            f10.setPoster("Fast_and_furious_7_poster.jpg");
            f10.setTrailer("Fast_and_furious_7_trailer.mp4");
            f10.setReleaseDate(LocalDate.of(2015, 4, 3));
            f10.setStatus("active");
            f10.setDeleted(true);
            films.add(f10);

            Film f11 = new Film();
            f11.setName("Mad Max: Fury Road");
            f11.setCountry("√öc/M·ªπ");
            f11.setDirector("George Miller");
            f11.setActor("Tom Hardy, Charlize Theron");
            f11.setDescription("Trong th·∫ø gi·ªõi h·∫≠u t·∫≠n th·∫ø, Max v√† Furiosa h·ª£p t√°c ƒë·ªÉ gi·∫£i c·ª©u c√°c n√¥ l·ªá.");
            f11.setDuration(120);
            f11.setPoster("Mad_max_poster.jpg");
            f11.setTrailer("Mad_max_trailer.mp4");
            f11.setReleaseDate(LocalDate.of(2015, 5, 15));
            f11.setStatus("active");
            f11.setDeleted(true);
            films.add(f11);

            Film f12 = new Film();
            f12.setName("M·∫Øt Bi·∫øc");
            f12.setCountry("Vi·ªát Nam");
            f12.setDirector("Victor V≈©");
            f12.setActor("Tr·∫ßn Nghƒ©a, Tr√∫c Anh, Tr·∫ßn Phong");
            f12.setDescription("M·ªëi t√¨nh ƒë∆°n ph∆∞∆°ng ƒë·∫ßy day d·ª©t c·ªßa Ng·∫°n d√†nh cho H√† Lan.");
            f12.setDuration(117);
            f12.setPoster("Mat_biec_poster.jpeg");
            f12.setTrailer("Mat_biec_trailer.mp4");
            f12.setReleaseDate(LocalDate.of(2019, 12, 20));
            f12.setStatus("active");
            f12.setDeleted(true);
            films.add(f12);

            Film f13 = new Film();
            f13.setName("NƒÉm M∆∞·ªùi M∆∞·ªùi L√¢m");
            f13.setCountry("Vi·ªát Nam");
            f13.setDirector("T·∫•n Ho√†ng Phong");
            f13.setActor("Tr·∫ßn Phong, Hu·ª≥nh T√∫ Uy√™n, Tr·∫ßn V√¢n Anh");
            f13.setDescription("M·ªôt b·ªô phim h√†i h∆∞·ªõc, t√¨nh c·∫£m v·ªÅ nh√≥m b·∫°n tr·∫ª gi·ªØa l√≤ng th√†nh ph·ªë.");
            f13.setDuration(100);
            f13.setPoster("Nam_muoi_muoi_lam_poster.jpg");
            f13.setTrailer("Nam_muoi_muoi_lam_trailer.mp4");
            f13.setReleaseDate(LocalDate.of(2024, 3, 8));
            f13.setStatus("upcoming");
            f13.setDeleted(true);
            films.add(f13);

            Film f14 = new Film();
            f14.setName("Nh√† Gia Ti√™n");
            f14.setCountry("Vi·ªát Nam");
            f14.setDirector("Hu·ª≥nh L·∫≠p");
            f14.setActor("Hu·ª≥nh L·∫≠p, Ph∆∞∆°ng M·ªπ Chi");
            f14.setDescription("M·ªôt b·ªô phim gia ƒë√¨nh h√†i h∆∞·ªõc v·ªÅ m·ªôt ng∆∞·ªùi cha che gi·∫•u t√¨nh h√¨nh t√†i ch√≠nh.");
            f14.setDuration(95);
            f14.setPoster("Nha_gia_tien_poster.jpg");
            f14.setTrailer("Nha_gia_tien_trailer.mp4");
            f14.setReleaseDate(LocalDate.of(2023, 11, 20));
            f14.setStatus("active");
            f14.setDeleted(true);
            films.add(f14);

            Film f15 = new Film();
            f15.setName("Pacific Rim");
            f15.setCountry("M·ªπ");
            f15.setDirector("Guillermo del Toro");
            f15.setActor("Charlie Hunnam, Idris Elba");
            f15.setDescription("Khi qu√°i v·∫≠t Kaiju tr·ªói d·∫≠y, con ng∆∞·ªùi ph·∫£i ch·∫ø t·∫°o robot Jaeger ƒë·ªÉ chi·∫øn ƒë·∫•u.");
            f15.setDuration(131);
            f15.setPoster("Pacific_rim_poster.webp");
            f15.setTrailer("Pacific_rim_trailer.mp4");
            f15.setReleaseDate(LocalDate.of(2013, 7, 12));
            f15.setStatus("active");
            f15.setDeleted(true);
            films.add(f15);

            Film f16 = new Film();
            f16.setName("Spirited Away");
            f16.setCountry("Nh·∫≠t B·∫£n");
            f16.setDirector("Hayao Miyazaki");
            f16.setActor("Rumi Hiiragi, Miyu Irino");
            f16.setDescription("C√¥ b√© Chihiro l·∫°c v√†o th·∫ø gi·ªõi linh h·ªìn v√† ph·∫£i l√†m vi·ªác ƒë·ªÉ c·ª©u cha m·∫π.");
            f16.setDuration(125);
            f16.setPoster("Spirited_away_poster.webp");
            f16.setTrailer("Spirited_away_trailer.mp4");
            f16.setReleaseDate(LocalDate.of(2001, 7, 20));
            f16.setStatus("active");
            f16.setDeleted(true);
            films.add(f16);

            Film f17 = new Film();
            f17.setName("Weathering with You");
            f17.setCountry("Nh·∫≠t B·∫£n");
            f17.setDirector("Makoto Shinkai");
            f17.setActor("Kotaro Daigo, Nana Mori");
            f17.setDescription("Hodaka g·∫∑p Hina ‚Äì c√¥ g√°i c√≥ kh·∫£ nƒÉng ƒëi·ªÅu khi·ªÉn th·ªùi ti·∫øt ·ªü Tokyo.");
            f17.setDuration(112);
            f17.setPoster("Tenki_no_ko_poster.jpg");
            f17.setTrailer("Tenki_no_ko_trailer.mp4");
            f17.setReleaseDate(LocalDate.of(2019, 7, 19));
            f17.setStatus("active");
            f17.setDeleted(true);
            films.add(f17);

            Film f18 = new Film();
            f18.setName("T√¥i Th·∫•y Hoa V√†ng Tr√™n C·ªè Xanh");
            f18.setCountry("Vi·ªát Nam");
            f18.setDirector("Victor V≈©");
            f18.setActor("Th·ªãnh Vinh, Tr·ªçng Khang, Thanh M·ªπ");
            f18.setDescription("C√¢u chuy·ªán tu·ªïi th∆° c·ªßa hai anh em Thi·ªÅu v√† T∆∞·ªùng t·∫°i l√†ng qu√™ ngh√®o.");
            f18.setDuration(103);
            f18.setPoster("Toi_thay_hoa_vang_tren_co_xanh_poster.jpg");
            f18.setTrailer("Toi_thay_hoa_vang_tren_co_xanh_trailer.mp4");
            f18.setReleaseDate(LocalDate.of(2015, 10, 2));
            f18.setStatus("active");
            f18.setDeleted(true);
            films.add(f18);

            Film f19 = new Film();
            f19.setName("T·ª≠ Chi·∫øn Tr√™n Kh√¥ng");
            f19.setCountry("M·ªπ");
            f19.setDirector("L√™ Nh·∫≠t Quang");
            f19.setActor("Th√°i Ho√†, Kaity Nguy·ªÖn, Thanh S∆°n, Xu√¢n Ph√∫c");
            f19.setDescription("B√¨nh ph·∫£i chi·∫øn ƒë·∫•u sinh t·ªìn khi chuy·∫øn bay b·ªã kh√¥ng t·∫∑c kh·ªëng ch·∫ø.");
            f19.setDuration(115);
            f19.setPoster("Tu_chien_tren_khong_poster.jpg");
            f19.setTrailer("Tu_chien_tren_khong_trailer.mp4");
            f19.setReleaseDate(LocalDate.of(1997, 6, 6));
            f19.setStatus("inactive");
            f19.setDeleted(true);
            films.add(f19);

            Film f20 = new Film();
            f20.setName("Your Name");
            f20.setCountry("Nh·∫≠t B·∫£n");
            f20.setDirector("Makoto Shinkai");
            f20.setActor("Ryunosuke Kamiki, Mone Kamishiraishi");
            f20.setDescription("Hai h·ªçc sinh b·ªã ho√°n ƒë·ªïi c∆° th·ªÉ v√† t√¨m c√°ch g·∫∑p nhau tr∆∞·ªõc khi th·∫£m h·ªça x·∫£y ra.");
            f20.setDuration(107);
            f20.setPoster("Your_name_poster.jpeg");
            f20.setTrailer("Your_name_trailer.mp4");
            f20.setReleaseDate(LocalDate.of(2016, 8, 26));
            f20.setStatus("active");
            f20.setDeleted(true);
            films.add(f20);

            // L∆∞u phim
            filmRepository.saveAll(films);
            System.out.println("‚úÖ ƒê√£ th√™m 20 phim th√†nh c√¥ng!");

            // 2Ô∏è‚É£ Mapping phim - th·ªÉ lo·∫°i
            Map<String, List<String>> mapping = Map.ofEntries(
                    Map.entry("5 Centimeters Per Second", List.of("L√£ng m·∫°n", "K·ªãch t√≠nh")),
                    Map.entry("Alice in Borderland 3", List.of("H√†nh ƒë·ªông", "Khoa h·ªçc vi·ªÖn t∆∞·ªüng", "K·ªãch t√≠nh")),
                    Map.entry("Avatar 3", List.of("Khoa h·ªçc vi·ªÖn t∆∞·ªüng", "H√†nh ƒë·ªông", "Phi√™u l∆∞u")),
                    Map.entry("B·ªë Gi√† 5 Si√™u ƒê·∫≥ng C·∫•p", List.of("H√†nh ƒë·ªông", "H√†i h∆∞·ªõc")),
                    Map.entry("B√∫p B√™ S√°t Nh√¢n", List.of("Kinh d·ªã", "H√†nh ƒë·ªông")),
                    Map.entry("Conan Movie 20: The Darkest Nightmare", List.of("Ho·∫°t h√¨nh", "T·ªôi ph·∫°m", "H√†nh ƒë·ªông")),
                    Map.entry("Deadpool 3", List.of("H√†nh ƒë·ªông", "H√†i h∆∞·ªõc", "Khoa h·ªçc vi·ªÖn t∆∞·ªüng")),
                    Map.entry("Death Race 3: Inferno", List.of("H√†nh ƒë·ªông", "Khoa h·ªçc vi·ªÖn t∆∞·ªüng")),
                    Map.entry("Doraemon Movie 44: Nobita's Earth Symphony", List.of("Ho·∫°t h√¨nh", "Gia ƒë√¨nh", "Phi√™u l∆∞u")),
                    Map.entry("Fast and Furious 7", List.of("H√†nh ƒë·ªông", "Phi√™u l∆∞u")),
                    Map.entry("Mad Max: Fury Road", List.of("H√†nh ƒë·ªông", "Phi√™u l∆∞u")),
                    Map.entry("M·∫Øt Bi·∫øc", List.of("L√£ng m·∫°n", "K·ªãch t√≠nh")),
                    Map.entry("NƒÉm M∆∞·ªùi M∆∞·ªùi L√¢m", List.of("H√†i h∆∞·ªõc", "Gia ƒë√¨nh")),
                    Map.entry("Nh√† Gia Ti√™n", List.of("K·ªãch t√≠nh", "T√¢m l√Ω")),
                    Map.entry("Pacific Rim", List.of("Khoa h·ªçc vi·ªÖn t∆∞·ªüng", "H√†nh ƒë·ªông")),
                    Map.entry("Spirited Away", List.of("Ho·∫°t h√¨nh", "Gi·∫£ t∆∞·ªüng", "Phi√™u l∆∞u")),
                    Map.entry("Weathering with You", List.of("Ho·∫°t h√¨nh", "L√£ng m·∫°n", "Gi·∫£ t∆∞·ªüng")),
                    Map.entry("T√¥i Th·∫•y Hoa V√†ng Tr√™n C·ªè Xanh", List.of("Gia ƒë√¨nh", "K·ªãch t√≠nh", "L√£ng m·∫°n")),
                    Map.entry("T·ª≠ Chi·∫øn Tr√™n Kh√¥ng", List.of("H√†nh ƒë·ªông", "K·ªãch t√≠nh")),
                    Map.entry("Your Name", List.of("L√£ng m·∫°n", "Gi·∫£ t∆∞·ªüng"))
            );

            for (Film film : films) {
                List<String> categoryNames = mapping.getOrDefault(film.getName(), List.of());
                for (String catName : categoryNames) {
                    Category category = categoryRepository.findByName(catName);
                    if (category != null) {
                        FilmCategory fc = new FilmCategory();
                        fc.setFilm(film);
                        fc.setCategory(category);
                        filmCategoryRepository.save(fc);
                    }
                }
            }

            System.out.println("‚úÖ ƒê√£ kh·ªüi t·∫°o b·∫£ng FILM v√† FILM_CATEGORY th√†nh c√¥ng!");
        } else {
            System.out.println("‚ÑπÔ∏è B·∫£ng FILM v√† FILM_CATEGORY ƒë√£ c√≥ d·ªØ li·ªáu, b·ªè qua kh·ªüi t·∫°o.");
        }
    }



    private int getLastDigit(String username) {
        if (username.endsWith("Admin")) return 1;
        if (username.endsWith("Staff")) return 2;
        if (username.endsWith("Customer")) return 3;
        return 0;
    }

    @Override
    @Transactional
    public void run(String... args) {
        initializeRoles();
        initializeUsersAndUserRoles();
        initializeUserProfiles();
        initializeCategories();
        initializeFilmsAndFilmCategories();
    }
}
